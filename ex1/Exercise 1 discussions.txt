3: 
* Concurrency: Processes running at the same moment in multi-core processors

* Parallelism: Processes running simultaneously, but not necessarily at the same moment - for instance share one cpu core

* Multi-core: Because clock speed has an "upper limit" limited by heat, money!

* Concurrency helps with timing problems and process duration. +Speed things up

* Both: +: above. -: Shared resurces are hard to manage, more complex, need setup

* Processes: An instance of an application, run on seperate memory

* Threads: Run on shared memory

* Green threads: Artificial workspace where you can work with multithreaded without relying on the OS to allow this.

* Co-routines: Several separate threads working on the same task, without a supervising scheduler

* pthread_create(): thread, threading.Thread(): thread, go: green thread

* GIL: Runs Concurrenty -> Threads are not parallel

* Make more interpreters, HACK

* Parameter for the Go scheduler used to decide how many OS threads can be run at the same time. (number of CPU cores on the machine)

4:
Var gives different results each run. This is because the functions call the same variable, perform their actions, and write their results to the memory. Because decrement() is called last, it overwrites the value written by Increment.